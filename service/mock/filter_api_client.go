// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/filter"
	"github.com/ONSdigital/dp-cantabular-csv-exporter/service"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that FilterAPIClientMock does implement service.FilterAPIClient.
// If this is not the case, regenerate this file with moq.
var _ service.FilterAPIClient = &FilterAPIClientMock{}

// FilterAPIClientMock is a mock implementation of service.FilterAPIClient.
//
// 	func TestSomethingThatUsesFilterAPIClient(t *testing.T) {
//
// 		// make and configure a mocked service.FilterAPIClient
// 		mockedFilterAPIClient := &FilterAPIClientMock{
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetDimensionsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, filterID string, q *filter.QueryParams) (filter.Dimensions, string, error) {
// 				panic("mock out the GetDimensions method")
// 			},
// 			GetJobStateFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterID string) (filter.Model, string, error) {
// 				panic("mock out the GetJobState method")
// 			},
// 		}
//
// 		// use mockedFilterAPIClient in code that requires service.FilterAPIClient
// 		// and then make assertions.
//
// 	}
type FilterAPIClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// GetDimensionsFunc mocks the GetDimensions method.
	GetDimensionsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, filterID string, q *filter.QueryParams) (filter.Dimensions, string, error)

	// GetJobStateFunc mocks the GetJobState method.
	GetJobStateFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterID string) (filter.Model, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// GetDimensions holds details about calls to the GetDimensions method.
		GetDimensions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// FilterID is the filterID argument value.
			FilterID string
			// Q is the q argument value.
			Q *filter.QueryParams
		}
		// GetJobState holds details about calls to the GetJobState method.
		GetJobState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// DownloadServiceToken is the downloadServiceToken argument value.
			DownloadServiceToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// FilterID is the filterID argument value.
			FilterID string
		}
	}
	lockChecker       sync.RWMutex
	lockGetDimensions sync.RWMutex
	lockGetJobState   sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *FilterAPIClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("FilterAPIClientMock.CheckerFunc: method is nil but FilterAPIClient.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedFilterAPIClient.CheckerCalls())
func (mock *FilterAPIClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetDimensions calls GetDimensionsFunc.
func (mock *FilterAPIClientMock) GetDimensions(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, filterID string, q *filter.QueryParams) (filter.Dimensions, string, error) {
	if mock.GetDimensionsFunc == nil {
		panic("FilterAPIClientMock.GetDimensionsFunc: method is nil but FilterAPIClient.GetDimensions was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		FilterID         string
		Q                *filter.QueryParams
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		FilterID:         filterID,
		Q:                q,
	}
	mock.lockGetDimensions.Lock()
	mock.calls.GetDimensions = append(mock.calls.GetDimensions, callInfo)
	mock.lockGetDimensions.Unlock()
	return mock.GetDimensionsFunc(ctx, userAuthToken, serviceAuthToken, collectionID, filterID, q)
}

// GetDimensionsCalls gets all the calls that were made to GetDimensions.
// Check the length with:
//     len(mockedFilterAPIClient.GetDimensionsCalls())
func (mock *FilterAPIClientMock) GetDimensionsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	FilterID         string
	Q                *filter.QueryParams
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		FilterID         string
		Q                *filter.QueryParams
	}
	mock.lockGetDimensions.RLock()
	calls = mock.calls.GetDimensions
	mock.lockGetDimensions.RUnlock()
	return calls
}

// GetJobState calls GetJobStateFunc.
func (mock *FilterAPIClientMock) GetJobState(ctx context.Context, userAuthToken string, serviceAuthToken string, downloadServiceToken string, collectionID string, filterID string) (filter.Model, string, error) {
	if mock.GetJobStateFunc == nil {
		panic("FilterAPIClientMock.GetJobStateFunc: method is nil but FilterAPIClient.GetJobState was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterID             string
	}{
		Ctx:                  ctx,
		UserAuthToken:        userAuthToken,
		ServiceAuthToken:     serviceAuthToken,
		DownloadServiceToken: downloadServiceToken,
		CollectionID:         collectionID,
		FilterID:             filterID,
	}
	mock.lockGetJobState.Lock()
	mock.calls.GetJobState = append(mock.calls.GetJobState, callInfo)
	mock.lockGetJobState.Unlock()
	return mock.GetJobStateFunc(ctx, userAuthToken, serviceAuthToken, downloadServiceToken, collectionID, filterID)
}

// GetJobStateCalls gets all the calls that were made to GetJobState.
// Check the length with:
//     len(mockedFilterAPIClient.GetJobStateCalls())
func (mock *FilterAPIClientMock) GetJobStateCalls() []struct {
	Ctx                  context.Context
	UserAuthToken        string
	ServiceAuthToken     string
	DownloadServiceToken string
	CollectionID         string
	FilterID             string
} {
	var calls []struct {
		Ctx                  context.Context
		UserAuthToken        string
		ServiceAuthToken     string
		DownloadServiceToken string
		CollectionID         string
		FilterID             string
	}
	mock.lockGetJobState.RLock()
	calls = mock.calls.GetJobState
	mock.lockGetJobState.RUnlock()
	return calls
}
